Julien Segonne

1.1
Il y a 2 scénarios, le thread 2 (noté t2) peut recevoir ou bien les données de t0 ou bien celles de t1.

1. Si t2 reçoit les données de t0 en premier, il peut ensuite envoyer ses données à t0 (qui les attend) puis recevoir celles de t1.
Il n'y a pas d'interblocage.

2. Si t2 reçoit d'abord les données de t1, il souhaite ensuite envoyer ses propres données à t0 mais ce dernier est en attente d'envoyer ses données.
Les deux threads attendent chacun de pouvoir envoyer leurs données. Il y a donc interblocage.

La probabilité d'avoir interblocage est donc de 0,5 car aussi bien t0 que t1 peut envoyer ses données en premier.

1.2

1. loi d'amdhal pour n>>1 : S=1/(1-p)
p=0,9
donc S=10

2. On pourra prendre 5 noeuds pour ne pas utiliser trop de ressources au vu de la question précédente.

3. loi de Gustafson :
S=s+n.p=(n-1)p
ici p=0,9 et n=4

donc S=2,7


1.3 Ensemble de mandelbrot

nombre de tâches = 1 :
Temps du calcul de l'ensemble de Mandelbrot : 4.300524950027466
Temps de constitution de l'image : 0.2887234687805176


nombre de tâches = 2 :
Temps du calcul de l'ensemble de Mandelbrot : 2.3807177543640137
Temps de constitution de l'image : 0.07704854011535645
speedup = 1,80


nombre de tâches = 3 :
Temps du calcul de l'ensemble de Mandelbrot : 2.0012011528015137
Temps de constitution de l'image : 0.08327937126159668
speedup = 2,15

nombre de tâches = 4 :
Temps du calcul de l'ensemble de Mandelbrot : 1.8156838417053223
Temps de constitution de l'image : 0.08396053314208984
speedup = 2,36

Le temps diminue car on répartie les tâches équitablement en parallélisant le code, on utilise donc un maximum de thread.

1.4 Produit matrice-vecteur

1.